<!-- Razor page for viewing form data saved in Json file-->
@page "/view_order"

<!---- Giving reference to the Package IronPdf to use its method and download functionality-->
@using IronPdf

@using POS_CW.Data.Services;
@using POS_CW.Data.Utils;
@inject NavigationManager NavManager

<h3>ViewFormData</h3>
<button class="btn btn-primary" @onclick="DownloadPdf">Download</button>
<button class="btn btn-danger" @onclick="DeleteFile">Delete</button>
<table class="table">
    <thead>
        <tr>
            <th>Coffee</th>
            <th>Addin</th>
            <th>Total Price</th>
            <th>Action Available</th>

          
        </tr>
    </thead>
    <tbody>
        <!-- Loop through each form data -->
        @foreach (var orderData in Order_Services.RetrieveOrderedData())
        {
            <tr>
                <!-- Display basic form data -->
                <td>
                    @if (orderData.Coffee != null)
                    {
                        <ul>
                            <li>Name: @orderData.Coffee.Coffee_Name Price: @orderData.Coffee.Coffee_Price</li>
                        </ul>
                    }
                    else
                    {
                        @* Display a message if no coffee *@
                        <h1>No Coffee</h1>
                    }
                </td>
                <td>
                    @if (orderData.Addin != null && orderData.Addin.Any())
                    {
                      @* Display addins in a list *@
                        <ul>
                            @foreach (var addin in orderData.Addin)
                            {
                                <li>Name: @addin.AddIn_Name, Price: @addin.AddIn_Price</li>
                            }
                        </ul>
                    }
                    else
                    { @* Display a message if no addins *@
                        <h1>No Addin</h1>
                    }
                </td>
                <td>@orderData.TotalPrice</td>
                <td>
                    @if(orderData.IsPaid==false){
                    <button type="submit"  @onclick="@(()=>CreatePayment(orderData.Id))"  class="btn btn-primary">Payment</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
@code {
    // Download PDF function
    public void DownloadPdf()
    {
        try
        {
            var OrderList = Order_Services.RetrieveOrderedData();

            if (OrderList != null && OrderList.Any())
            {
                // Create a PDF document
                var pdf = new ChromePdfRenderer();

                // HTML table for PDF
                var tableHtml = "<table><thead><tr><th>First Name</th><th>Last Name</th><th>Email</th><th>Phone Number</th><th>Address</th><th>Hobbies</th></tr></thead><tbody>";

                // Add data to the table
                // Loop through form data to add to the PDF table
                foreach (var OrderData in OrderList)
                {
                    tableHtml += "<tr>";
                    tableHtml += $"<td></td><td>{OrderData.Coffee}</td><td>{OrderData.Addin}<</td><td>{OrderData.TotalPrice}</td>";
                    tableHtml += "<td>";

                    // Check if hobbies exist for the current form data
                    if (OrderData.Coffee != null)
                    {
                        tableHtml += "<ul>";
                        // Loop through hobbies and add to the PDF table

                        tableHtml += $"<li>{OrderData.Coffee.Coffee_Name}</li>";
                        tableHtml += $"<li>{OrderData.Coffee.Coffee_Name}</li>";
                        tableHtml += "</ul>";
                    }
                    else
                    {
                        // Display a message if no hobbies
                        tableHtml += "<span>No hobbies</span>";
                    }
                    if (OrderData.Addin != null && OrderData.Addin.Any())
                    {
                        tableHtml += "<ul>";
                        // Loop through hobbies and add to the PDF table
                        foreach (var addinss in OrderData.Addin)
                        {
                            tableHtml += $"<li>{addinss.AddIn_Name}</li>";
                            tableHtml += $"<li>{addinss.AddIn_Price}</li>";
                        }
                        tableHtml += "</ul>";
                    }
                    else
                    {
                        // Display a message if no hobbies
                        tableHtml += "<span>No hobbies</span>";
                    }

                    tableHtml += "</td></tr>";
                }

                tableHtml += "</tbody></table>";

                //Convert HTML to Pdf
                var pdfStream = pdf.RenderHtmlAsPdf(tableHtml).Stream;

                // Save the PDF Inside the folder
                string pdfPath = Utility.OrderDirectoryPath();

                //Combining file FormData.pdf with directory and also creating the pdf file at the same time using FileMode inbuilt class of .net and its method and finally storing it in variable fileStream
                using (var fileStream = new System.IO.FileStream(Path.Combine(pdfPath, "OrderHistory.pdf"), System.IO.FileMode.Create))
                {
                    pdfStream.CopyToAsync(fileStream); //copying the data of pdf inside application to the pdf created in you device
                }

                // Show notification
                App.Current.MainPage.DisplayAlert("Success", "File Downloaded Successfully", "Ok");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    public void CreatePayment(Guid id)
    {
        try
        {
            // Check if the user is an admin before navigating
            
               
                NavManager.NavigateTo($"/payment/{id}");
          
        
        }
        catch (Exception ex)
        {
            // Handle any navigation errors
            Console.WriteLine($"Error Navigating: {ex.Message}");
        }
    }
    public static void DeleteFile()
    {
     String filePath = Utility.OrderFilePath();
    try
        {
            // Check if the file exists before attempting to delete it
            if (File.Exists(filePath))
            {
                File.Delete(filePath);
                Console.WriteLine($"File deleted: {filePath}");
            }
            else
            {
                Console.WriteLine($"File not found: {filePath}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting file: {ex.Message}");
        }
    }
}
}