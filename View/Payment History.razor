<!-- Razor page for viewing form data saved in Json file-->
@page "/view_payment"

<!---- Giving reference to the Package IronPdf to use its method and download functionality-->
@using IronPdf

@using POS_CW.Data.Models;
@using POS_CW.Data.Services;
@using POS_CW.Data.Utils;
@using POS_CW.Data.models;
@inject NavigationManager NavManager

<h3>ViewFormData</h3>
<button class="btn btn-primary" @onclick="DownloadPdf">Download</button>
<button class="btn btn-danger" @onclick="DeleteFile">Delete</button>
<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Username</th>
            <th>Phone Number</th>
            <th>Total Amount</th>
            <th>Discount</th>
            <th>Total After Discount</th>
           
        </tr>
    </thead>
    <tbody>
        <!-- Loop through each form data -->
        @foreach (var payData in PaymentService.RetrievePaymentData())
        {
            <tr>
                <!-- Display basic form data -->
                <td>
                   @payData.Id
                </td>
                <td>
                  @payData.Username
                </td>
                <td>@payData.PhoneNumber</td>
                <td>@payData.order.TotalPrice</td>
                <td>@string.Format("{0:P2}", payData.Discount)</td>
                <td>@(payData.order.TotalPrice-(payData.order.TotalPrice * payData.Discount) )</td>

            </tr>
        }
        <tr>
          
            
        </tr>
    </tbody>
</table>
@code {
    // Download PDF function
    public void DownloadPdf()
    {
        try
        {
            var PaymentList = PaymentService.RetrievePaymentData();
            if (PaymentList != null && PaymentList.Any())
            {
                // Calculate total revenue
                DateTime targetDate = DateTime.Today;
                double totalDiscountedPayments = PaymentList
             .Where(payment => payment.PayDate == targetDate)
             .Sum(payment => payment.order.TotalPrice - (payment.order.TotalPrice * payment.Discount));



                // Calculate top 5 most sold coffee and add-ins
                var topCoffee = PaymentList
                    .SelectMany<Payments, Coffee>(payment => Enumerable.Repeat(payment.order.Coffee, 1))
                    .GroupBy(coffee => coffee.Coffee_Name)
                    .Select(group => new
                    {
                        CoffeeName = group.Key,
                        Count = group.Count(),
                    })
                     .OrderByDescending(result => result.Count)

                    .Take(5);


                var topAddIns = PaymentList
                    .SelectMany<Payments, Add_In>(payment => payment.order.Addin)
                    .GroupBy(addin => addin.AddIn_Name)
                    .Select(group => new
                    {
                        AddIn_Name = group.Key,
                        Count = group.Count(),
                    })
                    .Take(5);


                // Create a PDF document
                var pdf = new ChromePdfRenderer();

                // HTML table for PDF
                var tableHtml = "<h1>REPORT</h1>";

                // Add data to the table
                // Loop through form data to add to the PDF tabl


                tableHtml += $"<h2>Total Revenue Of the Day {DateTime.Today}</h2>";

                // Add total revenue to the table
                tableHtml += $"<p>Total Revenue: {totalDiscountedPayments}</p>";

                // Add top 5 most sold coffee to the table
                tableHtml += "<h3>Top 5 Most Sold Coffee:</h3>";
                tableHtml += "<ul>";
                foreach (var coffee in topCoffee)
                {
                    tableHtml += $"<li>{coffee.CoffeeName} - Quantity: {coffee.Count}</li>";
                }
                tableHtml += "</ul>";

                // Add top 5 most sold add-ins to the table
                tableHtml += "<h3>Top 5 Most Sold Add-ins:</h3>";
                tableHtml += "<ul>";
                foreach (var addin in topAddIns)
                {
                    tableHtml += $"<li>{addin.AddIn_Name} - Quantity: {addin.Count}</li>";
                }
                tableHtml += "</ul>";

                // Convert HTML to Pdf
                var pdfStream = pdf.RenderHtmlAsPdf(tableHtml).Stream;

                // Save the PDF Inside the folder
                string pdfPath = Utility.PaymentDirectoryPath();

                // Combining file FormData.pdf with directory and also creating the pdf file at the same time using FileMode inbuilt class of .net and its method and finally storing it in variable fileStream
                using (var fileStream = new System.IO.FileStream(Path.Combine(pdfPath, "Report.pdf"), System.IO.FileMode.Create))
                {
                    pdfStream.CopyToAsync(fileStream); // copying the data of pdf inside application to the pdf created in your device
                }

                // Show notification
                App.Current.MainPage.DisplayAlert("Success", "File Downloaded Successfully", "Ok");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }


    public static void DeleteFile()
    {
        String filePath = Utility.PaymentFilePath();
        try
        {
            // Check if the file exists before attempting to delete it
            if (File.Exists(filePath))
            {
                File.Delete(filePath);
                Console.WriteLine($"File deleted: {filePath}");
            }
            else
            {
                Console.WriteLine($"File not found: {filePath}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting file: {ex.Message}");
        }
    }
}
}